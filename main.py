"""–ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª Streamlit –¥–æ–¥–∞—Ç–∫—É –¥–ª—è –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π –º–æ–ª–µ–∫—É–ª"""

import streamlit as st

from constants import PAGE_CONFIG, MESSAGES
from services.input_handlers import InputManager
from services.prediction_service import PredictionService
from services.display_service import DisplayService

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
st.set_page_config(**PAGE_CONFIG)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤
input_manager = InputManager()
prediction_service = PredictionService()
display_service = DisplayService()


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—É"""
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("üß™ Fluoriclogppka Prediction")
    st.markdown("–î–æ–¥–∞—Ç–æ–∫ –¥–ª—è –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π –º–æ–ª–µ–∫—É–ª –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é fluoriclogppka")
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–æ–ª–µ–∫—É–ª–∏ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    final_smiles, input_method = input_manager.get_molecule_input()
    
    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –º–æ–ª–µ–∫—É–ª—É
    if final_smiles and input_method:
        display_service.display_molecule_info(final_smiles, input_method)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è
    target_value = display_service.display_parameters_section()
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫—É –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è
    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è", type="primary"):
        if final_smiles:
            with st.spinner("–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è..."):
                result = prediction_service.predict(final_smiles, target_value)
                
                if result.get('success'):
                    st.session_state['last_prediction'] = result
                    st.success(MESSAGES["SUCCESS_PREDICTION"])
                else:
                    st.error(f"–ü–æ–º–∏–ª–∫–∞: {result.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")
        else:
            st.error(MESSAGES["ERROR_NO_MOLECULE"])
    
    # Display results
    if 'last_prediction' in st.session_state:
        st.markdown('<div class="section-header">üìà Prediction Results</div>', unsafe_allow_html=True)
        
        with st.container():
            st.markdown('<div class="results-container">', unsafe_allow_html=True)
            display_service.display_prediction_result(st.session_state['last_prediction'])
            st.markdown('</div>', unsafe_allow_html=True)
        
        # 3D features button
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            features_button = st.button("üß¨ Calculate 3D Features", use_container_width=True)
        
        if features_button:
            with st.spinner("Calculating 3D features..."):
                prediction = st.session_state['last_prediction']
                features_3d = prediction_service.get_3d_features(
                    smiles=prediction['smiles'],
                    target_value=prediction['parameters']["target_value"]
                )
                if features_3d:
                    st.session_state['last_prediction']['3d_features'] = features_3d
        
        # Display 3D features if available
        if '3d_features' in st.session_state['last_prediction']:
            st.markdown('<div class="section-header">üß¨ 3D Molecular Features</div>', unsafe_allow_html=True)
            display_service.display_3d_features(st.session_state['last_prediction']['3d_features'])


if __name__ == "__main__":
    main()