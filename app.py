import streamlit as st

from constants import PAGE_CONFIG, MESSAGES, CUSTOM_CSS
from services.input_handlers import InputManager
from services.prediction_service import PredictionService
from services.display_service import DisplayService

st.set_page_config(**PAGE_CONFIG)
st.markdown(CUSTOM_CSS, unsafe_allow_html=True)

input_manager = InputManager()
prediction_service = PredictionService()
display_service = DisplayService()


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—É"""
    
    st.title("üß™ Fluoriclogppka Prediction")
    st.markdown("–î–æ–¥–∞—Ç–æ–∫ –¥–ª—è –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π –º–æ–ª–µ–∫—É–ª –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é fluoriclogppka")
    
    final_smiles, input_method = input_manager.get_molecule_input()
    
    if final_smiles and input_method:
        display_service.display_molecule_info(final_smiles, input_method)
    
    target_value = display_service.display_parameters_section()
    
    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è", type="primary"):
        if final_smiles:
            with st.spinner("–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è..."):
                result = prediction_service.predict(final_smiles, target_value)
                
                if result.get('success'):
                    st.session_state['last_prediction'] = result
                    st.success(MESSAGES["SUCCESS_PREDICTION"])
                else:
                    st.error(f"–ü–æ–º–∏–ª–∫–∞: {result.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")
        else:
            st.error(MESSAGES["ERROR_NO_MOLECULE"])
    
    if 'last_prediction' in st.session_state:
        display_service.display_prediction_result(st.session_state['last_prediction'])
        
        if st.button("üß¨ –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ 3D —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"):
            with st.spinner("–†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ 3D —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏..."):
                prediction = st.session_state['last_prediction']
                features_3d = prediction_service.get_3d_features(
                    smiles=prediction['smiles'],
                    target_value=prediction['parameters']["target_value"],
                    convert_to_basic_type=True,
                )
                if features_3d:
                    st.session_state['last_prediction']['3d_features'] = features_3d
        
        if '3d_features' in st.session_state['last_prediction']:
            display_service.display_3d_features(st.session_state['last_prediction']['3d_features'])


if __name__ == "__main__":
    main()